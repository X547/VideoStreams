#include <stdio.h>
#include <string.h>

#include <OS.h>
#include <image.h>
#include <FindDirectory.h>
#include <graphic_driver.h>
#include <Accelerant.h>
#include <dirent.h>

#include <Application.h>
#include <WindowScreen.h>
#include <Screen.h>
#include <View.h>
#include <Rect.h>
#include <Region.h>
#include <Bitmap.h>

#include <private/shared/AutoDeleter.h>

#include <VideoConsumer.h>


#define CheckRet(err) {status_t _err = (err); if (_err < B_OK) return _err;}


int pick_device(const char *apath) {
	DIR				*d;
	struct dirent	*e;
	char name_buf[1024];
	int fd = -1;

	/* open directory apath */
	d = opendir(apath);
	if (!d) return B_ERROR;
	/* get a list of devices, filtering out ".", "..", and "stub" */
	/* the only reason stub is disabled is that I know stub (aka R3-style) drivers don't support wait for retrace */
	while ((e = readdir(d)) != NULL) {
		if (!strcmp(e->d_name, ".") || !strcmp(e->d_name, "..") || !strcmp(e->d_name, "stub"))
			continue;
		strcpy(name_buf, apath);
		strcat(name_buf, "/");
		strcat(name_buf, e->d_name);
		fd = open(name_buf, B_READ_WRITE);
		if (fd >= 0) break;
	}
	closedir(d);
	return fd;
}


image_id load_accelerant(int fd, GetAccelerantHook *hook) {
	status_t result;
	image_id image = -1;
	unsigned i;
	char
		signature[1024],
		path[PATH_MAX] = "/boot/home/Tests/VideoStreams/build.x86_64/install/accelerants/intel_extreme.accelerant";
	struct stat st;
	const static directory_which vols[] = {
		B_USER_NONPACKAGED_ADDONS_DIRECTORY,
		B_USER_ADDONS_DIRECTORY,
		B_SYSTEM_ADDONS_DIRECTORY,
	};

	/* get signature from driver */
	result = ioctl(fd, B_GET_ACCELERANT_SIGNATURE, &signature, sizeof(signature));
	if (result != B_OK) goto done;
	printf("B_GET_ACCELERANT_SIGNATURE returned ->%s<-\n", signature);

	// note failure by default
	for(i=0; i < sizeof (vols) / sizeof (vols[0]); i++) {

		/* ---
			compute directory path to common or beos addon directory on
			floppy or boot volume
		--- */

		printf("attempting to get path for %d (%d)\n", i, vols[i]);
		if (find_directory (vols[i], -1, false, path, PATH_MAX) != B_OK) {
			printf("find directory failed\n");
			continue;
		}

		strcat (path, "/accelerants/");
		strcat (path, signature);

		printf("about to stat(%s)\n", path);
		// don't try to load non-existant files
		if (stat(path, &st) != 0) continue;
		printf("Trying to load accelerant: %s\n", path);
		// load the image
		image = load_add_on(path);
		if (image >= 0) {
			printf("Accelerant loaded!\n");
			// get entrypoint from accelerant
			result = get_image_symbol(image, B_ACCELERANT_ENTRY_POINT,
#if defined(__INTEL__)
				B_SYMBOL_TYPE_ANY,
#else
				B_SYMBOL_TYPE_TEXT,
#endif
				(void **)hook);
			if (result == B_OK) {
				init_accelerant ia;
				printf("Entry point %s() found\n", B_ACCELERANT_ENTRY_POINT);
				ia = (init_accelerant)(*hook)(B_INIT_ACCELERANT, NULL);
				printf("init_accelerant is %p\n", ia);
				if (ia && ((result = ia(fd)) == B_OK)) {
					// we have a winner!
					printf("Accelerant %s accepts the job!\n", path);
					break;
				} else {
					printf("init_accelerant refuses the the driver: %ld\n", result);
				}
			} else {
				printf("Couldn't find the entry point :-(\n");
			}
			// unload the accelerant, as we must be able to init!
			unload_add_on(image);
		}
		if (image < 0) printf("image failed to load with reason %.8lx (%s)\n", image, strerror(image));
		// mark failure to load image
		image = -1;
	}

	printf("Add-on image id: %ld\n", image);

done:
	return image;
}


static const char *spaceToString(uint32 cs) {
	const char *s;
	switch (cs) {
#define s2s(a) case a: s = #a ; break
		s2s(B_RGB32);
		s2s(B_RGBA32);
		s2s(B_RGB32_BIG);
		s2s(B_RGBA32_BIG);
		s2s(B_RGB16);
		s2s(B_RGB16_BIG);
		s2s(B_RGB15);
		s2s(B_RGBA15);
		s2s(B_RGB15_BIG);
		s2s(B_RGBA15_BIG);
		s2s(B_CMAP8);
		s2s(B_GRAY8);
		s2s(B_GRAY1);
		s2s(B_YCbCr422);
		s2s(B_YCbCr420);
		s2s(B_YUV422);
		s2s(B_YUV411);
		s2s(B_YUV9);
		s2s(B_YUV12);
		default:
			s = "unknown"; break;
#undef s2s
	}
	return s;
}

void dump_mode(display_mode *dm) {
	display_timing *t = &(dm->timing);
	printf("  pixel_clock: %ldKHz\n", t->pixel_clock);
	printf("            H: %4d %4d %4d %4d\n", t->h_display, t->h_sync_start, t->h_sync_end, t->h_total);
	printf("            V: %4d %4d %4d %4d\n", t->v_display, t->v_sync_start, t->v_sync_end, t->v_total);
	printf(" timing flags:");
	if (t->flags & B_BLANK_PEDESTAL) printf(" B_BLANK_PEDESTAL");
	if (t->flags & B_TIMING_INTERLACED) printf(" B_TIMING_INTERLACED");
	if (t->flags & B_POSITIVE_HSYNC) printf(" B_POSITIVE_HSYNC");
	if (t->flags & B_POSITIVE_VSYNC) printf(" B_POSITIVE_VSYNC");
	if (t->flags & B_SYNC_ON_GREEN) printf(" B_SYNC_ON_GREEN");
	if (!t->flags) printf(" (none)\n");
	else printf("\n");
	printf(" refresh rate: %4.2f\n", ((double)t->pixel_clock * 1000) / ((double)t->h_total * (double)t->v_total));
	printf("  color space: %s\n", spaceToString(dm->space));
	printf(" virtual size: %dx%d\n", dm->virtual_width, dm->virtual_height);
	printf("dispaly start: %d,%d\n", dm->h_display_start, dm->v_display_start);

	printf("   mode flags:");
	if (dm->flags & B_SCROLL) printf(" B_SCROLL");
	if (dm->flags & B_8_BIT_DAC) printf(" B_8_BIT_DAC");
	if (dm->flags & B_HARDWARE_CURSOR) printf(" B_HARDWARE_CURSOR");
	if (dm->flags & B_PARALLEL_ACCESS) printf(" B_PARALLEL_ACCESS");
//	if (dm->flags & B_SUPPORTS_OVERLAYS) printf(" B_SUPPORTS_OVERLAYS");
	if (!dm->flags) printf(" (none)\n");
	else printf("\n");
}

status_t get_and_set_mode(GetAccelerantHook gah, display_mode *dm) {

	accelerant_mode_count gmc;
	uint32 mode_count;
	get_mode_list gml;
	ArrayDeleter<display_mode> mode_list;
	display_mode target, high, low;
	propose_display_mode pdm;
	status_t result = B_ERROR;
	set_display_mode sdm;
	uint32 i;

	/* find the propose mode hook */
	pdm = (propose_display_mode)gah(B_PROPOSE_DISPLAY_MODE, NULL);
	if (!pdm) {
		printf("No B_PROPOSE_DISPLAY_MODE\n");
		//return result;
	}
	/* and the set mode hook */
	sdm = (set_display_mode)gah(B_SET_DISPLAY_MODE, NULL);
	if (!sdm) {
		printf("No B_SET_DISPLAY_MODE\n");
		return result;
	}

	/* how many modes does the driver support */
	gmc = (accelerant_mode_count)gah(B_ACCELERANT_MODE_COUNT, NULL);
	if (!gmc) {
		printf("No B_ACCELERANT_MODE_COUNT\n");
		//return result;
	}
	mode_count = gmc();
	printf("mode_count = %lu\n", mode_count);
	if (mode_count == 0) return result;

	/* get a list of graphics modes from the driver */
	gml = (get_mode_list)gah(B_GET_MODE_LIST, NULL);
	if (!gml) {
		printf("No B_GET_MODE_LIST\n");
		return result;
	}
	mode_list.SetTo(new display_mode[mode_count]);
	if (!mode_list.IsSet()) {
		printf("Couldn't calloc() for mode list\n");
		return result;
	}
	if (gml(mode_list.Get()) != B_OK) {
		printf("mode list retrieval failed\n");
		return result;
	}

	/* take the first mode in the list */
//	target = high = low = *mode_list;

	for (i = 0; i < mode_count; i++) {
		if (
			((mode_list[i].space & ~0x3000) == B_RGB32_LITTLE || (mode_list[i].space & ~0x3000) == B_RGB32_BIG) &&
			mode_list[i].timing.h_display == 1920 && mode_list[i].timing.v_display == 1080 &&
			((double)mode_list[i].timing.pixel_clock * 1000) / ((double)mode_list[i].timing.h_total * (double)mode_list[i].timing.v_total) == 60
		) {
			target = high = low = mode_list[i];
			break;
		}
	}

	/* make as tall a virtual height as possible */
	//target.virtual_width = high.virtual_width = 2*target.virtual_width;
	target.virtual_height = high.virtual_height = 2*target.virtual_height;
	/* propose the display mode */
	if (pdm == NULL || pdm(&target, &low, &high) == B_ERROR) {
		printf("propose_display_mode failed\n");
		//goto free_mode_list;
	}
	printf("Target display mode: \n");
	dump_mode(&target);
	//exit(1);
	/* we got a display mode, now set it */
	BScreen screen;
	if (/*sdm(&target) == B_ERROR*/ screen.SetMode(&target)) {
		printf("set display mode failed\n");
		return result;
	}
	/* note the mode and success */
	*dm = target;
	result = B_OK;
	
	return result;
}

void get_frame_buffer(GetAccelerantHook gah, frame_buffer_config *fbc) {
	get_frame_buffer_config gfbc;
	gfbc = (get_frame_buffer_config)gah(B_GET_FRAME_BUFFER_CONFIG, NULL);
	gfbc(fbc);
}

sem_id get_sem(GetAccelerantHook gah) {
	accelerant_retrace_semaphore ars;
	ars = (accelerant_retrace_semaphore)gah(B_ACCELERANT_RETRACE_SEMAPHORE, NULL);
	return ars != NULL ? ars() : -1;
}


class TestConsumer: public VideoConsumer
{
private:
	FileDescriptorCloser fFd;
	HandleDeleter<image_id, status_t, unload_add_on> fImage;
	GetAccelerantHook fGah;
	uninit_accelerant fUa;
	move_display_area fMda;

	display_mode fDm;
	frame_buffer_config fFbc;
	
	sem_id fRetraceSem;
	
	status_t SetupSwapChain()
	{
		area_id framebufferArea = area_for(fFbc.frame_buffer);
		CheckRet(framebufferArea);
		area_info areaInfo;
		CheckRet(get_area_info(framebufferArea, &areaInfo));
		void* framebufferAreaBase = areaInfo.address;
		
		SwapChain swapChain;
		swapChain.size = sizeof(SwapChain);
		swapChain.presentEffect = presentEffectSwap;
		swapChain.bufferCnt = 2;
		ArrayDeleter<VideoBuffer> buffers(new VideoBuffer[2]);
		swapChain.buffers = buffers.Get();
		for (uint32 i = 0; i < swapChain.bufferCnt; i++) {
			buffers[i].id = i;
			buffers[i].area        = framebufferArea;
			buffers[i].offset      = (addr_t)fFbc.frame_buffer - (addr_t)framebufferAreaBase +
				i * fFbc.bytes_per_row * fDm.timing.v_display;
			buffers[i].length      = fFbc.bytes_per_row * fDm.timing.v_display;
			buffers[i].bytesPerRow = fFbc.bytes_per_row;
			buffers[i].width       = fDm.timing.h_display;
			buffers[i].height      = fDm.timing.v_display;
			buffers[i].colorSpace  = B_RGBA32;
		}
		SetSwapChain(&swapChain);
		return B_OK;
	}
	
public:
	TestConsumer(const char* name): VideoConsumer(name)
	{
		/* find a graphic device to open */
		fFd.SetTo(pick_device("/dev/graphics"));
		if (!fFd.IsSet()) {
			printf("Can't open device: %s (%s)\n", strerror(fFd.Get()), strerror(errno));
			return;
		}
		/* load the accelerant */
		fImage.SetTo(load_accelerant(fFd.Get(), &fGah));
		if (!fImage.IsSet()) {
			printf("Can't load accelerant: %s\n", strerror(fImage.Get()));
			return;
		}

		fUa = (uninit_accelerant)fGah(B_UNINIT_ACCELERANT, NULL);

		/* get and set a display mode */
		if (get_and_set_mode(fGah, &fDm) != B_OK) {
			printf("Can't set mode\n");
			return;
		}

		fMda = (move_display_area)fGah(B_MOVE_DISPLAY, NULL);
		fRetraceSem = get_sem(fGah);
		get_frame_buffer(fGah, &fFbc);
	}

	virtual ~TestConsumer()
	{
		printf("-TestConsumer: "); WriteMessenger(BMessenger(this)); printf("\n");

		if (fImage.IsSet()) {
			fMda(0, 0);
			if (fUa) fUa();
		}
	}

	void Connected(bool isActive)
	{
		if (isActive) {
			printf("TestConsumer: connected to ");
			WriteMessenger(Link());
			printf("\n");
		} else {
			printf("TestConsumer: disconnected\n");
			SetSwapChain(NULL);
		}
	}
	
	status_t SwapChainRequested(const SwapChainSpec& spec)
	{
		printf("TestConsumer::SwapChainRequested(%" B_PRIuSIZE ")\n", spec.bufferCnt);
		SetupSwapChain();
		return B_OK;
	}

	virtual void Present(const BRegion* dirty)
	{
		fMda(0, fDm.timing.v_display*DisplayBufferId());
		Presented();
	}
	
};

class TestWindow: public BWindow
{
private:
	ObjectDeleter<TestConsumer> fConsumer;

public:
	TestWindow(BRect frame): BWindow(frame, "AccelerantConsumer", B_NO_BORDER_WINDOW_LOOK, B_NORMAL_WINDOW_FEEL, B_ASYNCHRONOUS_CONTROLS)
	{
		SetFlags(Flags() | B_CLOSE_ON_ESCAPE);
		fConsumer.SetTo(new TestConsumer("testConsumer"));
		Looper()->AddHandler(fConsumer.Get());
	}

	void Quit()
	{
		be_app_messenger.SendMessage(B_QUIT_REQUESTED);
		BWindow::Quit();
	}

};

class TestApplication: public BApplication
{
private:

public:
private:
	TestWindow *fWnd;

public:
	TestApplication(): BApplication("application/x-vnd.VideoStreams-TestConsumer")
	{
	}

	void ReadyToRun() {
		be_app->HideCursor();
		BScreen screen;
		fWnd = new TestWindow(screen.Frame());
		fWnd->Show();
	}
};


int main()
{
	TestApplication app;
	app.Run();
	return 0;
}
